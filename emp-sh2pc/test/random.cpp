#include <sstream>
#include <fstream>
#include <iostream>
#include <random>

double lapGen(double beta){
    // https://www.johndcook.com/blog/2018/03/13/generating-laplace-random-variables/
    std::random_device rd;
    std::mt19937 gen(rd());
    std::exponential_distribution<> expVar((1 / beta));
    double exp1 = expVar(gen);
    double exp2 = expVar(gen);     
    double res = exp1 - exp2;
    return res;
}

double uniformGen(){
    std::random_device rd;   
    std::mt19937 gen(rd());  
    std::uniform_int_distribution<> distrib(0, 100);
    int res = distrib(gen);
    return res;
}

std::vector<int> lapGenVector(int binNum, double beta){
    std::vector<int> res(binNum, 0);
    for(int i = 0; i < binNum; ++i) {
        res[i] = round(lapGen(beta));
    }
    return res;
}

std::vector<int> uniformGenVector(int binNum){
    std::vector<int> res(binNum, 0);
    for(int i = 0; i < binNum; ++i) {
        res[i] = uniformGen();
    }
    return res;
}

int main(int argc, char** argv) {

double variance = 0;
for(int n=0; n<10000; ++n) {
    double lap = lapGen(5);
    variance += lap * lap;
}

std::cout << (variance / 10000) << '\n';
std::cout << (2*5*5) << '\n';
//Use `distrib` to transform the random unsigned int generated by gen into an int in [1, 6]
//std::cout << distrib(gen) << ' ';
std::cout << uniformGen() << '\n';
std::vector<int>  res1 = lapGenVector(10, 10); 
std::vector<int>  res2 = uniformGenVector(10);
for(int n=0; n<10; ++n) {
std::cout << res1[n] << '\n';
std::cout << res2[n] << '\n';
std::vector<int> a;
for (int i = 1; i <= 5; i++)
        a.push_back(i);
  std::reverse(a.begin(), a.end());
  for (int i = 1; i <= 5; i++)
        std::cout << a[i] << '\n';
  return 0;
}
}
